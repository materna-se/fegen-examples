// This file has been generated by FeGen based on a spring application. Do not edit it.

import { ApiNavigationLink, ApiBase } from '@materna-se/fegen-runtime';

/**
 * This type is used as a basis for the different variants of this domain type. It can be created in the frontend
 * (in order to store it to the backend, for example) as it does neither have mandatory `_links` nor `id`.
 */
export interface AddressBase extends ApiBase {
    city: string
    country: string | null
    street: string
    zip: string
    
    _links?: {
        self: ApiNavigationLink
        
    }
}

/**
 * This type is used for data transfer. Each time we read an object of this domain type from a rest service,
 * this type will be returned.
 */
export interface AddressDto extends AddressBase {
    _links: {
        self: ApiNavigationLink
        
    }
}

/**
 * This type is the default type of choice in the frontend as it has an id (which can be added to the `AddressDto`
 * via `apiHelper#getObjectId`). Consequently, this type is used for fields that reference this type.
 */
export interface Address extends AddressDto {
    id: number
}

/**
 * This type is used as a basis for the different variants of this domain type. It can be created in the frontend
 * (in order to store it to the backend, for example) as it does neither have mandatory `_links` nor `id`.
 */
export interface ContactBase extends ApiBase {
    firstName: string
    lastName: string
    number: string | null
    address: Address | null
    owner: User | null
    _links?: {
        self: ApiNavigationLink
        address: ApiNavigationLink
        owner: ApiNavigationLink
    }
}

/**
 * This type is used for data transfer. Each time we read an object of this domain type from a rest service,
 * this type will be returned.
 */
export interface ContactDto extends ContactBase {
    _links: {
        self: ApiNavigationLink
        address: ApiNavigationLink
        owner: ApiNavigationLink
    }
}

/**
 * This type is the default type of choice in the frontend as it has an id (which can be added to the `ContactDto`
 * via `apiHelper#getObjectId`). Consequently, this type is used for fields that reference this type.
 */
export interface Contact extends ContactDto {
    id: number
}

/**
 * This type is used as a basis for the different variants of this domain type. It can be created in the frontend
 * (in order to store it to the backend, for example) as it does neither have mandatory `_links` nor `id`.
 */
export interface TestEntityBase extends ApiBase {
    booleanTrue: boolean
    date2000_6_12: string
    dateTime2000_1_1_12_30: string | null
    int32: number
    intMinusBillion: number
    long64: number
    optionalIntBillion: number | null
    optionalIntNull: number | null
    stringText: string
    
    _links?: {
        self: ApiNavigationLink
        
    }
}

/**
 * This type is used for data transfer. Each time we read an object of this domain type from a rest service,
 * this type will be returned.
 */
export interface TestEntityDto extends TestEntityBase {
    _links: {
        self: ApiNavigationLink
        
    }
}

/**
 * This type is the default type of choice in the frontend as it has an id (which can be added to the `TestEntityDto`
 * via `apiHelper#getObjectId`). Consequently, this type is used for fields that reference this type.
 */
export interface TestEntity extends TestEntityDto {
    id: number
}

/**
 * This type is used as a basis for the different variants of this domain type. It can be created in the frontend
 * (in order to store it to the backend, for example) as it does neither have mandatory `_links` nor `id`.
 */
export interface UserBase extends ApiBase {
    name: string
    contacts: Contact[]
    _links?: {
        self: ApiNavigationLink
        contacts: ApiNavigationLink
    }
}

/**
 * This type is used for data transfer. Each time we read an object of this domain type from a rest service,
 * this type will be returned.
 */
export interface UserDto extends UserBase {
    _links: {
        self: ApiNavigationLink
        contacts: ApiNavigationLink
    }
}

/**
 * This type is the default type of choice in the frontend as it has an id (which can be added to the `UserDto`
 * via `apiHelper#getObjectId`). Consequently, this type is used for fields that reference this type.
 */
export interface User extends UserDto {
    id: number
}

export interface AddressBaseProjection extends Address {
    
}

export interface ContactBaseProjection extends Contact {
    
}

export interface ContactFull extends Contact {
    address: AddressBaseProjection | null
}

export interface TestEntityBaseProjection extends TestEntity {
    
}

export interface UserBaseProjection extends User {
    
}